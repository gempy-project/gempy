
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/geometries/e05_fault.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_geometries_e05_fault.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_geometries_e05_fault.py:


Model 5 - Fault
===============

Modeling a fault

This script demonstrates how to create a simple fault model with constant offset using GemPy,
a Python-based, open-source library for implicit geological modeling.

.. GENERATED FROM PYTHON SOURCE LINES 10-20

.. code-block:: Python


    # Import necessary libraries
    import gempy as gp
    import gempy_viewer as gpv
    import numpy as np
    from gempy_engine.core.data.stack_relation_type import StackRelationType

    # sphinx_gallery_thumbnail_number = 2









.. GENERATED FROM PYTHON SOURCE LINES 21-23

Generate the model
Define the path to data

.. GENERATED FROM PYTHON SOURCE LINES 23-50

.. code-block:: Python

    data_path = 'https://raw.githubusercontent.com/cgre-aachen/gempy_data/master/'
    path_to_data = data_path + "/data/input_data/jan_models/"
    # Create a GeoModel instance
    data = gp.create_geomodel(
        project_name='fault',
        extent=[0, 1000, 0, 1000, 0, 1000],
        refinement=6,
        importer_helper=gp.data.ImporterHelper(
            path_to_orientations=path_to_data + "model5_orientations.csv",
            path_to_surface_points=path_to_data + "model5_surface_points.csv"
        )
    )
    # Map geological series to surfaces
    gp.map_stack_to_surfaces(
        gempy_model=data,
        mapping_object={
            "Fault_Series": 'fault',
            "Strat_Series": ('rock2', 'rock1')
        }
    )
    # Define fault groups
    data.structural_frame.structural_groups[0].structural_relation = StackRelationType.FAULT
    data.structural_frame.fault_relations = np.array([[0, 1], [0, 0]])
    # Compute the geological model
    gp.compute_model(data)
    geo_data = data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Surface points hash:  8fe9250462c3e65080818a84d29925378664f6be46301dcdb42ed4047aa3fe6f
    Orientations hash:  58d1d28be0c52dfdcedf36c9adc3b231e67d6923554159d6484dba589b0bfc5e
    Setting Backend To: AvailableBackends.numpy
    Chunking done: 9 chunks
    Chunking done: 9 chunks




.. GENERATED FROM PYTHON SOURCE LINES 51-52

Plot the initial geological model in the y direction

.. GENERATED FROM PYTHON SOURCE LINES 52-54

.. code-block:: Python

    gpv.plot_2d(geo_data, direction=['y'], show_results=False)




.. image-sg:: /examples/geometries/images/sphx_glr_e05_fault_001.png
   :alt: Cell Number: mid Direction: y
   :srcset: /examples/geometries/images/sphx_glr_e05_fault_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_2d.visualization_2d.Plot2D object at 0x7ff2a57c4fa0>



.. GENERATED FROM PYTHON SOURCE LINES 55-61

.. code-block:: Python


    # Plot the result of the model in the x and y direction with data
    gpv.plot_2d(geo_data, direction='y', show_data=True)
    gpv.plot_2d(geo_data, direction='x', show_data=True)

    gpv.plot_3d(geo_data, show_data=True, show_boundaries=True, show_lith=True)



.. image-sg:: /examples/geometries/images/sphx_glr_e05_fault_002.png
   :alt: e05 fault
   :srcset: /examples/geometries/images/sphx_glr_e05_fault_002.png
   :class: sphx-glr-single-img

.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/geometries/images/sphx_glr_e05_fault_003.png
         :alt: Cell Number: mid Direction: y
         :srcset: /examples/geometries/images/sphx_glr_e05_fault_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/geometries/images/sphx_glr_e05_fault_004.png
         :alt: Cell Number: mid Direction: x
         :srcset: /examples/geometries/images/sphx_glr_e05_fault_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_3d.vista.GemPyToVista object at 0x7ff24e9d4160>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.036 seconds)


.. _sphx_glr_download_examples_geometries_e05_fault.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: e05_fault.ipynb <e05_fault.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: e05_fault.py <e05_fault.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: e05_fault.zip <e05_fault.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
