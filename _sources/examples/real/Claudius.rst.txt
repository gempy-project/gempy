
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/real/Claudius.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_real_Claudius.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_real_Claudius.py:


Geomodeling benchmark: the "Claudius"-Model
========

This model is part of a geomodeling benchmaring effort. More information (and, hopefully, publication) coming.

.. GENERATED FROM PYTHON SOURCE LINES 9-19

.. code-block:: Python

    import sys, os

    # Importing gempy
    import gempy as gp
    import gempy_viewer as gpv

    # Aux imports
    import numpy as np
    import pandas as pn








.. GENERATED FROM PYTHON SOURCE LINES 20-26

Loading data from repository:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

With pandas we can do it directly from the web and with the right args
we can directly tidy the data in gempy style:


.. GENERATED FROM PYTHON SOURCE LINES 28-59

.. code-block:: Python


    data_path = os.path.abspath('../../data/input_data/Claudius')

    reduce_data_by = 30

    dfs = []
    for letter in 'ABCD':
        dfs.append(
            pn.read_csv(
                filepath_or_buffer=f"{data_path}/{letter}Points.csv",
                sep=';',
                names=['X', 'Y', 'Z', 'surface', 'cutoff'],
                header=0
            )[::reduce_data_by]
        )

    # Add fault:
    dfs.append(
        pn.read_csv(
            filepath_or_buffer=f"{data_path}/Fault.csv",
            names=['X', 'Y', 'Z', 'surface'],
            header=0,
            sep=','
        )
    )

    surface_points = pn.concat(dfs, sort=True)
    surface_points['surface'] = surface_points['surface'].astype('str')
    surface_points.reset_index(inplace=True, drop=False)
    surface_points.tail()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>index</th>
          <th>X</th>
          <th>Y</th>
          <th>Z</th>
          <th>cutoff</th>
          <th>surface</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>755</th>
          <td>88</td>
          <td>551099.25</td>
          <td>7.82e+06</td>
          <td>-10466.86</td>
          <td>NaN</td>
          <td>Claudius_fault</td>
        </tr>
        <tr>
          <th>756</th>
          <td>89</td>
          <td>551160.81</td>
          <td>7.82e+06</td>
          <td>-10356.46</td>
          <td>NaN</td>
          <td>Claudius_fault</td>
        </tr>
        <tr>
          <th>757</th>
          <td>90</td>
          <td>551131.90</td>
          <td>7.82e+06</td>
          <td>-10383.32</td>
          <td>NaN</td>
          <td>Claudius_fault</td>
        </tr>
        <tr>
          <th>758</th>
          <td>91</td>
          <td>551164.41</td>
          <td>7.82e+06</td>
          <td>-10299.96</td>
          <td>NaN</td>
          <td>Claudius_fault</td>
        </tr>
        <tr>
          <th>759</th>
          <td>92</td>
          <td>551197.19</td>
          <td>7.82e+06</td>
          <td>-10216.82</td>
          <td>NaN</td>
          <td>Claudius_fault</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 60-62

.. code-block:: Python

    surface_points.dtypes





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    index        int64
    X          float64
    Y          float64
    Z          float64
    cutoff     float64
    surface     object
    dtype: object



.. GENERATED FROM PYTHON SOURCE LINES 63-65

How many points are per surface


.. GENERATED FROM PYTHON SOURCE LINES 67-69

.. code-block:: Python

    surface_points.groupby('surface').count()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>index</th>
          <th>X</th>
          <th>Y</th>
          <th>Z</th>
          <th>cutoff</th>
        </tr>
        <tr>
          <th>surface</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>167</td>
          <td>167</td>
          <td>167</td>
          <td>167</td>
          <td>167</td>
        </tr>
        <tr>
          <th>250</th>
          <td>167</td>
          <td>167</td>
          <td>167</td>
          <td>167</td>
          <td>167</td>
        </tr>
        <tr>
          <th>330</th>
          <td>166</td>
          <td>166</td>
          <td>166</td>
          <td>166</td>
          <td>166</td>
        </tr>
        <tr>
          <th>60</th>
          <td>167</td>
          <td>167</td>
          <td>167</td>
          <td>167</td>
          <td>167</td>
        </tr>
        <tr>
          <th>Claudius_fault</th>
          <td>93</td>
          <td>93</td>
          <td>93</td>
          <td>93</td>
          <td>0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 70-72

Now we do the same with the orientations:


.. GENERATED FROM PYTHON SOURCE LINES 74-93

.. code-block:: Python

    dfs = []

    for surf in ['0', '330']:
        o = pn.read_csv(
            filepath_or_buffer=f"{data_path}/Dips.csv",
            sep=';',
            names=['X', 'Y', 'Z', 'G_x', 'G_y', 'G_z', '-'],
            header=1
        )

        # Orientation needs to belong to a surface. This is mainly to categorize to which series belong and to
        # use the same color
        o['surface'] = surf
        dfs.append(o)
    orientations = pn.concat(dfs, sort=True)
    orientations.reset_index(inplace=True, drop=False)

    orientations.tail()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>index</th>
          <th>-</th>
          <th>G_x</th>
          <th>G_y</th>
          <th>G_z</th>
          <th>X</th>
          <th>Y</th>
          <th>Z</th>
          <th>surface</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>43</th>
          <td>19</td>
          <td>0.98</td>
          <td>0.19</td>
          <td>0.14</td>
          <td>-0.97</td>
          <td>550989.31</td>
          <td>7.82e+06</td>
          <td>-9782.97</td>
          <td>330</td>
        </tr>
        <tr>
          <th>44</th>
          <td>20</td>
          <td>0.25</td>
          <td>-0.08</td>
          <td>-0.04</td>
          <td>-1.00</td>
          <td>550939.31</td>
          <td>7.82e+06</td>
          <td>-9958.43</td>
          <td>330</td>
        </tr>
        <tr>
          <th>45</th>
          <td>21</td>
          <td>0.65</td>
          <td>-0.16</td>
          <td>0.08</td>
          <td>-0.98</td>
          <td>549276.81</td>
          <td>7.82e+06</td>
          <td>-9985.13</td>
          <td>330</td>
        </tr>
        <tr>
          <th>46</th>
          <td>22</td>
          <td>0.05</td>
          <td>-0.01</td>
          <td>-0.15</td>
          <td>-0.99</td>
          <td>548976.81</td>
          <td>7.82e+06</td>
          <td>-9974.27</td>
          <td>330</td>
        </tr>
        <tr>
          <th>47</th>
          <td>23</td>
          <td>0.76</td>
          <td>0.37</td>
          <td>-0.19</td>
          <td>-0.91</td>
          <td>549764.31</td>
          <td>7.82e+06</td>
          <td>-9901.21</td>
          <td>330</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 94-96

.. code-block:: Python

    orientations.dtypes





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    index        int64
    -          float64
    G_x        float64
    G_y        float64
    G_z        float64
    X          float64
    Y          float64
    Z          float64
    surface     object
    dtype: object



.. GENERATED FROM PYTHON SOURCE LINES 97-105

Data initialization:
~~~~~~~~~~~~~~~~~~~~

Suggested size of the axis-aligned modeling box: Origin: 548800 7816600
-8400 Maximum: 552500 7822000 -11010

Suggested resolution: 100m x 100m x -90m (grid size 38 x 55 x 30)


.. GENERATED FROM PYTHON SOURCE LINES 107-108

Number of voxels:

.. GENERATED FROM PYTHON SOURCE LINES 108-160

.. code-block:: Python

    np.array([38, 55, 30]).prod()

    surface_points_table: gp.data.SurfacePointsTable = gp.data.SurfacePointsTable.from_arrays(
        x=surface_points['X'].values,
        y=surface_points['Y'].values,
        z=surface_points['Z'].values,
        names=surface_points['surface'].values
    )

    orientations_table: gp.data.OrientationsTable = gp.data.OrientationsTable.from_arrays(
        x=orientations['X'].values,
        y=orientations['Y'].values,
        z=orientations['Z'].values,
        G_x=orientations['G_x'].values,
        G_y=orientations['G_y'].values,
        G_z=orientations['G_z'].values,
        names=orientations['surface'].values,
        name_id_map=surface_points_table.name_id_map  # ! Make sure that ids and names are shared
    )

    structural_frame: gp.data.StructuralFrame = gp.data.StructuralFrame.from_data_tables(
        surface_points=surface_points_table,
        orientations=orientations_table
    )

    geo_model: gp.data.GeoModel = gp.create_geomodel(
        project_name='Claudius',
        extent=[548800, 552500, 7816600, 7822000, -11010, -8400],
        resolution=[38, 55, 30],
        refinement=5,
        structural_frame=structural_frame
    )

    group_fault = gp.data.StructuralGroup(
        name='Fault1',
        elements=[geo_model.structural_frame.structural_elements.pop(-2)],
        structural_relation=gp.data.StackRelationType.FAULT,
        fault_relations=gp.data.FaultsRelationSpecialCase.OFFSET_ALL
    )

    geo_model.structural_frame.get_group_by_name("default_formation").elements.pop(-1)

    # Insert the fault group into the structural frame:
    geo_model.structural_frame.insert_group(0, group_fault)

    gp.set_is_fault(
        frame=geo_model.structural_frame,
        fault_groups=[geo_model.structural_frame.get_group_by_name('Fault1')]
    )

    print(geo_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    meta=GeoModelMeta(name='Claudius', creation_date='2025-05-21T12:14:13.493986', last_modification_date=None, owner=None) structural_frame=StructuralFrame(
            structural_groups=[
    StructuralGroup(
            name=Fault1,
            structural_relation=StackRelationType.FAULT,
            elements=[
    Element(
            name=Claudius_fault,
            color=#527682,
            is_active=True
    )
    ]
    ),
    StructuralGroup(
            name=default_formation,
            structural_relation=StackRelationType.ERODE,
            elements=[
    Element(
            name=0,
            color=#015482,
            is_active=True
    ),
    Element(
            name=250,
            color=#9f0052,
            is_active=True
    ),
    Element(
            name=330,
            color=#ffbe00,
            is_active=True
    ),
    Element(
            name=60,
            color=#728f02,
            is_active=True
    )
    ]
    )
    ],
            fault_relations=
    [[False,  True],
     [False, False]],
     grid=Grid(values=array([[ 548848.68421053, 7816649.09090909,  -10966.5       ],
           [ 548848.68421053, 7816649.09090909,  -10879.5       ],
           [ 548848.68421053, 7816649.09090909,  -10792.5       ],
           ...,
           [ 552451.31578947, 7821950.90909091,   -8617.5       ],
           [ 552451.31578947, 7821950.90909091,   -8530.5       ],
           [ 552451.31578947, 7821950.90909091,   -8443.5       ]],
          shape=(62700, 3)), length=array([], dtype=float64), _octree_grid=None, _dense_grid=RegularGrid(resolution=array([38, 55, 30]), extent=array([ 548800.,  552500., 7816600., 7822000.,  -11010.,   -8400.]), values=array([[ 548848.68421053, 7816649.09090909,  -10966.5       ],
           [ 548848.68421053, 7816649.09090909,  -10879.5       ],
           [ 548848.68421053, 7816649.09090909,  -10792.5       ],
           ...,
           [ 552451.31578947, 7821950.90909091,   -8617.5       ],
           [ 552451.31578947, 7821950.90909091,   -8530.5       ],
           [ 552451.31578947, 7821950.90909091,   -8443.5       ]],
          shape=(62700, 3)), mask_topo=array([], shape=(0, 3), dtype=bool), _transform=None), _custom_grid=None, _topography=None, _sections=None, _centered_grid=None, _transform=None, _octree_levels=-1) geophysics_input=None input_transform={'_cached_pivot': None,
     '_is_default_transform': False,
     'position': array([ -550658.0605    , -7819213.97425586,     9824.6748045 ]),
     'rotation': array([0., 0., 0.]),
     'scale': array([9.56397917e-05, 9.56397917e-05, 9.56397917e-05])} interpolation_grid=None interpolation_options=InterpolationOptions(kernel_options=KernelOptions(range=1.7, c_o=10.0, uni_degree=1, i_res=4.0, gi_res=2.0, number_dimensions=3, kernel_function=AvailableKernelFunctions.cubic, kernel_solver=Solvers.DEFAULT, compute_condition_number=False, optimizing_condition_number=False, condition_number=None), evaluation_options=EvaluationOptions(_number_octree_levels=5, _number_octree_levels_surface=4, octree_curvature_threshold=-1.0, octree_error_threshold=1.0, octree_min_level=2, mesh_extraction=True, mesh_extraction_masking_options=<MeshExtractionMaskingOptions.INTERSECT: 3>, mesh_extraction_fancy=True, evaluation_chunk_size=500000, compute_scalar_gradient=False, verbose=False), debug=True, cache_mode=<CacheMode.IN_MEMORY_CACHE: 3>, cache_model_name='Claudius', block_solutions_type=<BlockSolutionType.DENSE_GRID: 2>, sigmoid_slope=5000000, debug_water_tight=False, temp_interpolation_values=TempInterpolationValues(current_octree_level=0))




.. GENERATED FROM PYTHON SOURCE LINES 161-164

We are going to increase the smoothness (nugget) of the data to increase
the conditional number of the matrix:


.. GENERATED FROM PYTHON SOURCE LINES 166-168

.. code-block:: Python

    gp.modify_surface_points(geo_model, nugget=0.01)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

            <table>
              <tr><td>Structural Groups:</td><td>
        <table style="border-left:1.2px solid black;>
          <tr><th colspan="2"><b>StructuralGroup:</b></th></tr>
          <tr><td>Name:</td><td>Fault1</td></tr>
          <tr><td>Structural Relation:</td><td>StackRelationType.FAULT</td></tr>
          <tr><td>Elements:</td><td>
        <table width="50%" style="border-left:15px solid #527682;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>Claudius_fault</td></tr>
        </table>
            </td></tr>
        </table>
            <br>
        <table style="border-left:1.2px solid black;>
          <tr><th colspan="2"><b>StructuralGroup:</b></th></tr>
          <tr><td>Name:</td><td>default_formation</td></tr>
          <tr><td>Structural Relation:</td><td>StackRelationType.ERODE</td></tr>
          <tr><td>Elements:</td><td>
        <table width="50%" style="border-left:15px solid #015482;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>0</td></tr>
        </table>
            <br>
        <table width="50%" style="border-left:15px solid #9f0052;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>250</td></tr>
        </table>
            <br>
        <table width="50%" style="border-left:15px solid #ffbe00;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>330</td></tr>
        </table>
            <br>
        <table width="50%" style="border-left:15px solid #728f02;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>60</td></tr>
        </table>
            </td></tr>
        </table>
            </td></tr>
              <tr><td>Fault Relations:</td><td><table style="border-collapse: collapse; table-layout: fixed;"><th></th><th style="transform: rotate(-35deg); height:150px; vertical-align: bottom; text-align: center;">Fault1</th><th style="transform: rotate(-35deg); height:150px; vertical-align: bottom; text-align: center;">default_fo...</th><tr><th>Fault1</th><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td><td style="background-color: #527682; width: 20px; height: 20px; border: 1px solid black;"></td></tr><tr><th>default_formation</th><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td></tr></table></td></tr>
              <tr><td></td><td>
            <table>
              <tr>
                <td><div style="display: inline-block; background-color: #527682; width: 20px; height: 20px; border: 1px solid black;"></div> True</td>
                <td><div style="display: inline-block; background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></div> False</td>
              </tr>
            </table>
            </td></tr>
            </table>
        
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 169-172

Also the original poles are pointing downwards. We can change the
direction by calling the following:


.. GENERATED FROM PYTHON SOURCE LINES 174-176

.. code-block:: Python

    gp.modify_orientations(geo_model, polarity=-1)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

            <table>
              <tr><td>Structural Groups:</td><td>
        <table style="border-left:1.2px solid black;>
          <tr><th colspan="2"><b>StructuralGroup:</b></th></tr>
          <tr><td>Name:</td><td>Fault1</td></tr>
          <tr><td>Structural Relation:</td><td>StackRelationType.FAULT</td></tr>
          <tr><td>Elements:</td><td>
        <table width="50%" style="border-left:15px solid #527682;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>Claudius_fault</td></tr>
        </table>
            </td></tr>
        </table>
            <br>
        <table style="border-left:1.2px solid black;>
          <tr><th colspan="2"><b>StructuralGroup:</b></th></tr>
          <tr><td>Name:</td><td>default_formation</td></tr>
          <tr><td>Structural Relation:</td><td>StackRelationType.ERODE</td></tr>
          <tr><td>Elements:</td><td>
        <table width="50%" style="border-left:15px solid #015482;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>0</td></tr>
        </table>
            <br>
        <table width="50%" style="border-left:15px solid #9f0052;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>250</td></tr>
        </table>
            <br>
        <table width="50%" style="border-left:15px solid #ffbe00;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>330</td></tr>
        </table>
            <br>
        <table width="50%" style="border-left:15px solid #728f02;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>60</td></tr>
        </table>
            </td></tr>
        </table>
            </td></tr>
              <tr><td>Fault Relations:</td><td><table style="border-collapse: collapse; table-layout: fixed;"><th></th><th style="transform: rotate(-35deg); height:150px; vertical-align: bottom; text-align: center;">Fault1</th><th style="transform: rotate(-35deg); height:150px; vertical-align: bottom; text-align: center;">default_fo...</th><tr><th>Fault1</th><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td><td style="background-color: #527682; width: 20px; height: 20px; border: 1px solid black;"></td></tr><tr><th>default_formation</th><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td></tr></table></td></tr>
              <tr><td></td><td>
            <table>
              <tr>
                <td><div style="display: inline-block; background-color: #527682; width: 20px; height: 20px; border: 1px solid black;"></div> True</td>
                <td><div style="display: inline-block; background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></div> False</td>
              </tr>
            </table>
            </td></tr>
            </table>
        
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 177-181

We need an orientation per series/fault. The faults does not have
orientation so the easiest is to create an orientation from the surface
points availablle:


.. GENERATED FROM PYTHON SOURCE LINES 181-195

.. code-block:: Python


    element = geo_model.structural_frame.get_element_by_name("Claudius_fault")
    new_orientations: gp.data.OrientationsTable = gp.create_orientations_from_surface_points_coords(
        xyz_coords=element.surface_points.xyz
    )
    gp.add_orientations(
        geo_model=geo_model,
        x=new_orientations.data['X'],
        y=new_orientations.data['Y'],
        z=new_orientations.data['Z'],
        pole_vector=new_orientations.grads,
        elements_names="Claudius_fault"
    )






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

            <table>
              <tr><td>Structural Groups:</td><td>
        <table style="border-left:1.2px solid black;>
          <tr><th colspan="2"><b>StructuralGroup:</b></th></tr>
          <tr><td>Name:</td><td>Fault1</td></tr>
          <tr><td>Structural Relation:</td><td>StackRelationType.FAULT</td></tr>
          <tr><td>Elements:</td><td>
        <table width="50%" style="border-left:15px solid #527682;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>Claudius_fault</td></tr>
        </table>
            </td></tr>
        </table>
            <br>
        <table style="border-left:1.2px solid black;>
          <tr><th colspan="2"><b>StructuralGroup:</b></th></tr>
          <tr><td>Name:</td><td>default_formation</td></tr>
          <tr><td>Structural Relation:</td><td>StackRelationType.ERODE</td></tr>
          <tr><td>Elements:</td><td>
        <table width="50%" style="border-left:15px solid #015482;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>0</td></tr>
        </table>
            <br>
        <table width="50%" style="border-left:15px solid #9f0052;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>250</td></tr>
        </table>
            <br>
        <table width="50%" style="border-left:15px solid #ffbe00;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>330</td></tr>
        </table>
            <br>
        <table width="50%" style="border-left:15px solid #728f02;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>60</td></tr>
        </table>
            </td></tr>
        </table>
            </td></tr>
              <tr><td>Fault Relations:</td><td><table style="border-collapse: collapse; table-layout: fixed;"><th></th><th style="transform: rotate(-35deg); height:150px; vertical-align: bottom; text-align: center;">Fault1</th><th style="transform: rotate(-35deg); height:150px; vertical-align: bottom; text-align: center;">default_fo...</th><tr><th>Fault1</th><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td><td style="background-color: #527682; width: 20px; height: 20px; border: 1px solid black;"></td></tr><tr><th>default_formation</th><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td></tr></table></td></tr>
              <tr><td></td><td>
            <table>
              <tr>
                <td><div style="display: inline-block; background-color: #527682; width: 20px; height: 20px; border: 1px solid black;"></div> True</td>
                <td><div style="display: inline-block; background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></div> False</td>
              </tr>
            </table>
            </td></tr>
            </table>
        
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 196-198

.. code-block:: Python

    gpv.plot_2d(geo_model, direction='y')




.. image-sg:: /examples/real/images/sphx_glr_Claudius_001.png
   :alt: Cell Number: mid Direction: y
   :srcset: /examples/real/images/sphx_glr_Claudius_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_2d.visualization_2d.Plot2D object at 0x7ff24ea4b070>



.. GENERATED FROM PYTHON SOURCE LINES 199-201

We will need to separate with surface belong to each series:


.. GENERATED FROM PYTHON SOURCE LINES 201-210

.. code-block:: Python


    gp.map_stack_to_surfaces(
        gempy_model=geo_model,
        mapping_object={
            'Default series': ('0', '60', '250'),
            'Fault': 'Claudius_fault',
            'Uncomformity': '330',
        }
    )





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

            <table>
              <tr><td>Structural Groups:</td><td>
        <table style="border-left:1.2px solid black;>
          <tr><th colspan="2"><b>StructuralGroup:</b></th></tr>
          <tr><td>Name:</td><td>Default series</td></tr>
          <tr><td>Structural Relation:</td><td>StackRelationType.ERODE</td></tr>
          <tr><td>Elements:</td><td>
        <table width="50%" style="border-left:15px solid #015482;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>0</td></tr>
        </table>
            <br>
        <table width="50%" style="border-left:15px solid #728f02;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>60</td></tr>
        </table>
            <br>
        <table width="50%" style="border-left:15px solid #9f0052;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>250</td></tr>
        </table>
            </td></tr>
        </table>
            <br>
        <table style="border-left:1.2px solid black;>
          <tr><th colspan="2"><b>StructuralGroup:</b></th></tr>
          <tr><td>Name:</td><td>Fault</td></tr>
          <tr><td>Structural Relation:</td><td>StackRelationType.ERODE</td></tr>
          <tr><td>Elements:</td><td>
        <table width="50%" style="border-left:15px solid #527682;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>Claudius_fault</td></tr>
        </table>
            </td></tr>
        </table>
            <br>
        <table style="border-left:1.2px solid black;>
          <tr><th colspan="2"><b>StructuralGroup:</b></th></tr>
          <tr><td>Name:</td><td>Uncomformity</td></tr>
          <tr><td>Structural Relation:</td><td>StackRelationType.ERODE</td></tr>
          <tr><td>Elements:</td><td>
        <table width="50%" style="border-left:15px solid #ffbe00;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>330</td></tr>
        </table>
            </td></tr>
        </table>
            </td></tr>
              <tr><td>Fault Relations:</td><td><table style="border-collapse: collapse; table-layout: fixed;"><th></th><th style="transform: rotate(-35deg); height:150px; vertical-align: bottom; text-align: center;">Default se...</th><th style="transform: rotate(-35deg); height:150px; vertical-align: bottom; text-align: center;">Fault</th><th style="transform: rotate(-35deg); height:150px; vertical-align: bottom; text-align: center;">Uncomformi...</th><tr><th>Default series</th><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td></tr><tr><th>Fault</th><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td></tr><tr><th>Uncomformity</th><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td></tr></table></td></tr>
              <tr><td></td><td>
            <table>
              <tr>
                <td><div style="display: inline-block; background-color: #527682; width: 20px; height: 20px; border: 1px solid black;"></div> True</td>
                <td><div style="display: inline-block; background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></div> False</td>
              </tr>
            </table>
            </td></tr>
            </table>
        
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 211-213

So far we did not specify which series/faults are actula faults:


.. GENERATED FROM PYTHON SOURCE LINES 215-222

.. code-block:: Python

    gp.set_is_fault(
        frame=geo_model.structural_frame,
        fault_groups=[geo_model.structural_frame.get_group_by_name('Fault')]
    )

    geo_model.structural_frame






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

            <table>
              <tr><td>Structural Groups:</td><td>
        <table style="border-left:1.2px solid black;>
          <tr><th colspan="2"><b>StructuralGroup:</b></th></tr>
          <tr><td>Name:</td><td>Default series</td></tr>
          <tr><td>Structural Relation:</td><td>StackRelationType.ERODE</td></tr>
          <tr><td>Elements:</td><td>
        <table width="50%" style="border-left:15px solid #015482;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>0</td></tr>
        </table>
            <br>
        <table width="50%" style="border-left:15px solid #728f02;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>60</td></tr>
        </table>
            <br>
        <table width="50%" style="border-left:15px solid #9f0052;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>250</td></tr>
        </table>
            </td></tr>
        </table>
            <br>
        <table style="border-left:1.2px solid black;>
          <tr><th colspan="2"><b>StructuralGroup:</b></th></tr>
          <tr><td>Name:</td><td>Fault</td></tr>
          <tr><td>Structural Relation:</td><td>StackRelationType.FAULT</td></tr>
          <tr><td>Elements:</td><td>
        <table width="50%" style="border-left:15px solid #527682;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>Claudius_fault</td></tr>
        </table>
            </td></tr>
        </table>
            <br>
        <table style="border-left:1.2px solid black;>
          <tr><th colspan="2"><b>StructuralGroup:</b></th></tr>
          <tr><td>Name:</td><td>Uncomformity</td></tr>
          <tr><td>Structural Relation:</td><td>StackRelationType.ERODE</td></tr>
          <tr><td>Elements:</td><td>
        <table width="50%" style="border-left:15px solid #ffbe00;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>330</td></tr>
        </table>
            </td></tr>
        </table>
            </td></tr>
              <tr><td>Fault Relations:</td><td><table style="border-collapse: collapse; table-layout: fixed;"><th></th><th style="transform: rotate(-35deg); height:150px; vertical-align: bottom; text-align: center;">Default se...</th><th style="transform: rotate(-35deg); height:150px; vertical-align: bottom; text-align: center;">Fault</th><th style="transform: rotate(-35deg); height:150px; vertical-align: bottom; text-align: center;">Uncomformi...</th><tr><th>Default series</th><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td></tr><tr><th>Fault</th><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td><td style="background-color: #527682; width: 20px; height: 20px; border: 1px solid black;"></td></tr><tr><th>Uncomformity</th><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td></tr></table></td></tr>
              <tr><td></td><td>
            <table>
              <tr>
                <td><div style="display: inline-block; background-color: #527682; width: 20px; height: 20px; border: 1px solid black;"></div> True</td>
                <td><div style="display: inline-block; background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></div> False</td>
              </tr>
            </table>
            </td></tr>
            </table>
        
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 223-233

.. code-block:: Python

    geo_model.interpolation_options.kernel_options.range = 1
    gp.compute_model(
        geo_model,
        gp.data.GemPyEngineConfig(
            backend=gp.data.AvailableBackends.numpy,
            use_gpu=False,
            dtype='float64'
        )
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Setting Backend To: AvailableBackends.numpy
    Chunking done: 73 chunks
    Chunking done: 13 chunks
    Chunking done: 31 chunks
    Chunking done: 6 chunks
    Chunking done: 6 chunks
    Chunking done: 36 chunks
    Chunking done: 7 chunks
    Chunking done: 15 chunks
    Chunking done: 35 chunks
    Chunking done: 6 chunks
    Chunking done: 15 chunks
    Chunking done: 6 chunks


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <b>Solutions:</b> 5 Octree Levels, 5 DualContouringMeshes
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 234-238

.. code-block:: Python

    sect = ['mid']

    gpv.plot_2d(geo_model, cell_number=sect, series_n=1, show_scalar=True, direction='x')




.. image-sg:: /examples/real/images/sphx_glr_Claudius_002.png
   :alt: Cell Number: mid Direction: x
   :srcset: /examples/real/images/sphx_glr_Claudius_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_2d.visualization_2d.Plot2D object at 0x7ff24edbb4f0>



.. GENERATED FROM PYTHON SOURCE LINES 239-241

.. code-block:: Python

    gpv.plot_2d(geo_model, cell_number=sect, show_data=True, direction='x')




.. image-sg:: /examples/real/images/sphx_glr_Claudius_003.png
   :alt: Cell Number: mid Direction: x
   :srcset: /examples/real/images/sphx_glr_Claudius_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_2d.visualization_2d.Plot2D object at 0x7ff253adca00>



.. GENERATED FROM PYTHON SOURCE LINES 242-246

.. code-block:: Python

    gpv.plot_2d(geo_model, cell_number=[28], series_n=0, direction='y', show_scalar=True)
    gpv.plot_2d(geo_model, cell_number=[28], series_n=1, direction='y', show_scalar=True)
    gpv.plot_2d(geo_model, cell_number=[28], series_n=2, direction='y', show_scalar=True)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/real/images/sphx_glr_Claudius_004.png
         :alt: Cell Number: 28 Direction: y
         :srcset: /examples/real/images/sphx_glr_Claudius_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/real/images/sphx_glr_Claudius_005.png
         :alt: Cell Number: 28 Direction: y
         :srcset: /examples/real/images/sphx_glr_Claudius_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/real/images/sphx_glr_Claudius_006.png
         :alt: Cell Number: 28 Direction: y
         :srcset: /examples/real/images/sphx_glr_Claudius_006.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_2d.visualization_2d.Plot2D object at 0x7ff24e95ca00>



.. GENERATED FROM PYTHON SOURCE LINES 247-249

.. code-block:: Python

    gpv.plot_2d(geo_model, cell_number=[28], show_data=True, direction='y')




.. image-sg:: /examples/real/images/sphx_glr_Claudius_007.png
   :alt: Cell Number: 28 Direction: y
   :srcset: /examples/real/images/sphx_glr_Claudius_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_2d.visualization_2d.Plot2D object at 0x7ff2a2c65000>



.. GENERATED FROM PYTHON SOURCE LINES 250-253

.. code-block:: Python


    # sphinx_gallery_thumbnail_number = 8
    gpv.plot_3d(geo_model, show_lith=True, show_data=True, show_boundaries=True)



.. image-sg:: /examples/real/images/sphx_glr_Claudius_008.png
   :alt: Claudius
   :srcset: /examples/real/images/sphx_glr_Claudius_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_3d.vista.GemPyToVista object at 0x7ff24e9283a0>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 3.067 seconds)


.. _sphx_glr_download_examples_real_Claudius.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: Claudius.ipynb <Claudius.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: Claudius.py <Claudius.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: Claudius.zip <Claudius.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
